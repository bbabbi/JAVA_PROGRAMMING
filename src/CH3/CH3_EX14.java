package CH3;

/* 자바의 예외처리 */

/* 예외(Exception)란?
   : 자바에서 오동작이나 결과에 악영향을 미칠 수 있는 실행 중 발생한 오류를 '예외'라고 한다.
   문법에 맞지 않게 작성된 코드는 사전에 컴파일러에 의해 컴파일 오류로 걸러지지만,
   예외는 사용자의 잘못된 입력이나 배열의 인덱스가 배열의 크기를 넘어가는 등,
   예기치 못한 상황에 의해 프로그램 실행 중에 발생한다.
   - 정수를 0으로 나누는 경우
   - 배열의 크기보다 큰 인덱스로 배열의 원소를 접근하는 경우
   - 존재하지 않는 파일을 읽으려고 하는 경우
   - 정수 입력을 기다리는 코드가 실행되고 있을 때, 사용자가 문자를 입력한 경우

   => 실행 중에 예외가 발생하면 자바 플랫폼이 가장 먼저 알게 되어,
      현재 실행 중인 응용프로그램에게 예외를 전달한다.
      만일 응용프로그램이 예외를 대처하는 코드를 가지고 있지 않다면,
      자바 플랫폼은 응용프로그램을 곧바로 종료시킨다.
 */

/* 예외 vs 실행시간 오류

1) 실행시간 오류
: 조건문이 잘못 작성된 반복문이 무한루프를  실행하거나,
recursion을 제어하는 코드를 잘못 작성하여 스택이 계속 쌓이게 되어(스택 오버플로)
JVM의 메모리가 부족할 때까지 실행되는 등, "언제 어디서 발생할지 예측 불가"
발생하였을 때, 시스템이나 사용자에게 해를 주거나 강제로 프로그램을 종료시키지 않으면 멈출 수 없음.

2) 예외
: 사용자 프로그램에서 try-catch 블록을 이용하여 제어(handling)할 수 있는 실행시간 오류
파일을 여는 코드나 나누기하는 코드 등을 작성할 때 파일을 열지 못할 수 있고,
0으로 나누기가 이루어질 수 있음을 알고,
이런 상황이 발생했을 때 try-catch 블록을 이용하여 문제를 바로잡아 계속 실행되게 하거나,
시스템이나 사용자에게 해를 끼치지 않으면서 정상적인 방법으로 프로그램을 종료시킬 수 있도록 제어 가능한 경우
*/


/* ------------------------------ */

// 두 정수를 입력받아 나눗셈을 하고 몫을 구하는 프로그램
// 0으로 나누기 예외 발생으로 프로그램이 강제 종료되는 경우

import java.util.Scanner;

public class CH3_EX14 {
    public static void main(String[] args){
        Scanner scanner = new Scanner(System.in);
        int dividend; // 나뉨수
        int divisor; // 나눗수

        System.out.print("나뉨수를 입력하시오 : ");
        dividend = scanner.nextInt(); // 나뉨수 입력
        System.out.print("나눗수를 입력하시오 : ");
        divisor = scanner.nextInt(); // 나눗수 입력
        System.out.println(dividend + "를" + divisor + "로 나누면 몫은" + dividend/divisor + "입니다.");
        scanner.close();
    }
}

/* ArithmeticException 예외
: 위 예제 프로그램은 대처 코드가 없기 때문에 자바 플랫폼에 의해 강제 종료된다.
 */