/* CH4 : 클래스와 객체 */

package CH4;

public class CH4_EX0 {
}

/* 4.1 객체 지향과 자바
-> 객체지향언어는 실세계의 객체(object, 우리 주변의 모든 것들. 자신만의 고유한 특성이나 행동을 가짐)를
   프로그램 내에 표현하기 위해 클래스와 객체 개념을 도입하였다. 다음은 객체 지향 언어의 특성이다.

   1) 캡슐화(Encapsulation)
      : 객체를 캡슐로 싸서 내부를 보호하고 볼 수 없게 하는 것으로 객체의 가장 본질적인 특징.
      like 캡슐 약. 캡슐약은 어떤 색인지, 어떤 성분인지 보이지 않으먀 외부의 접근으로부터 안전함.
      객체는 캡슐화가 원칙이지만 외부와의 접속을 위해 몇 부분만 공개 노출한다.
      -> 자바에서 객체는 '클래스(class)'라는 캡슐을 사용하며,
         필드(멤버변수)와 메소드(멤버함수)로 구성된다.

   2) 상속(Inheritance)
      : 실세계에서의 상속은 상위 개체의 속성이 하위 개체에 물려져서,
      하위 개체가 상위 개체의 속성을 모두 가지는 관계이다.
      -> 자바에서의 상속은 자식 클래스가 부모 클래스의 속성을 물려받고 기능을 '확장'하는 개념.
         자바에서 부모 클래스를 '슈퍼 클래스'라고 하고,
         자식 클래스를 '서브 클래스'라고 부른다.
      => 상속은 슈퍼 클래스의 필드와 메소드를 물려받아 코드를 재사용함으로써,
         코드 작성에 드는 시간과 비용을 줄인다.

   3) 다형성(Polymorphism)
      : 같은 이름의 메소드가 클래스 혹은 객체에 따라 다르게 동작하도록 구현되는 것.
      대표적인 기능으로는 오버로딩과 오버라이딩이 있음.
      - 메소드 오버라이딩(overriding)
        슈퍼클래스에 구현된 메소드를, 서브클래스에서 '동일한 이름'으로 자신의 특징에 맞게 다시 구현
      - 메소드 오버로딩(overloading)
        클래스 내에서 '이름이 같지만 서로 다르게 동작'하는 메소드를 여러 개 만드는 것.
 */

/* 객체 지향 언어의 목적
1) 소프트웨어의 생산성 향상
: 객체, 캡슐화, 상속, 다형성 등 소프트웨어의 재사용을 위한 여러 기법들을 가진 객체 지향 언어 탄생
-> 객체 지향 언어는 '상속'을 통해 이미 작성된 코드를 재사용하기 쉬우며,
   부분 수정을 통해 소프트웨어를 다시 만드는 부담을 대폭 줄일 수 있게 한다.
=> 결국 객체 지향 언어는 소프트웨어의 생산성을 향상시킨다.

2) 실세계에 대한 쉬운 모델링
- 과거 : 수학 계산 or 통계 처리 등이 주류를 이룸.
  -> 데이터의 처리 과정이나 계산의 절차를 잘 표현하는 '절차 지향 언어'가 적합.
- 현재 : 컴퓨터가 산업 전반에 활용되어, 실세계의 일을 프로그래밍 해야 하는 경우가 많아짐.
  -> 객체들의 상호작용을 묘사할 수 있는 객체 중심의 '객체 지향 언어'가 부각됨.
  => 대표적인 예 : 게임
     게임에서는 등장인물, 무기, 배경 등이 각각 실존하며,
     사용자의 입력이나 타이머에 의해 상호작용하면서 프로그램이 실행됨.
 */